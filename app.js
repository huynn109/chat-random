// Generated by CoffeeScript 1.9.2
(function() {
  var addToList, app, deleteFromList, express, findStranger, initSearch, io, removePartner, sanitize, seekingUsers, server,
    slice = [].slice;

  express = require('express');

  app = express();

  server = require('http').createServer(app);

  io = require('socket.io').listen(server);

  sanitize = require('validator').sanitize;

  app.set('port', process.env.PORT || 3000);

  app.set('views', __dirname + "/views");

  app.set('view engine', 'jade');

  app.use(express.favicon(__dirname + "/public/favicon.ico"));

  app.use(express.logger('dev'));

  app.use(app.router);

  app.use(require('less-middleware')({
    src: __dirname + "/public"
  }));

  app.use(express["static"](__dirname + "/public"));

  if ('development' === app.get('env')) {
    app.use(express.errorHandler());
  }

  app.get('/', function(req, res) {
    return res.render('index', {
      title: 'Stranger Chat'
    });
  });

  seekingUsers = [];

  findStranger = function(socket) {
    var len, stranger;
    if (seekingUsers.length > 1) {
      len = seekingUsers.length;
      stranger = seekingUsers[Math.floor(Math.random() * len)];
      
      if (socket === stranger) {
        return findStranger(socket);
      } else {
        return stranger;
      }
    }
  };

  removePartner = function(user) {
    return user.set('partner', void 0);
  };

  initSearch = function(socket) {
    var stranger;
    stranger = findStranger(socket);
    if (stranger != null) {
      socket.set('partner', stranger);
      stranger.set('partner', socket);
      deleteFromList(socket, stranger);
      socket.emit('connected');
      return stranger.emit('connected');
    } else {
      return socket.emit('log', {
        print: 'Waiting for stranger...'
      });
    }
  };

  addToList = function(user) {
    seekingUsers.push(user);
    return initSearch(user);
  };

  deleteFromList = function() {
    var i, len1, results, user, users;
    users = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    results = [];
    for (i = 0, len1 = users.length; i < len1; i++) {
      user = users[i];
      results.push(seekingUsers.splice(seekingUsers.indexOf(user), 1));
    }
    return results;
  };

  io.sockets.on('connection', function(socket) {
    addToList(socket);
    socket.on('next', function(data) {
      return socket.get('partner', function(err, stranger) {
        if (err) {
          throw err;
        }
        if (stranger) {
          stranger.emit('next');
          removePartner(stranger);
          removePartner(socket);
          setTimeout(function() {
            return addToList(stranger);
          }, 3000);
          return addToList(socket);
        } else {
          removePartner(socket);
          return socket.emit('log', {
            print: 'You have no companion, please wait'
          });
        }
      });
    });
    socket.on('msg', function(data) {
      return socket.get('partner', function(err, stranger) {
        var message;
        if (err) {
          throw err;
        }
        message = sanitize(data.body).trim();
        message = sanitize(message).xss();
        if (message.length > 240) {
          message = message.slice(0, 240);
        }
        if (stranger && message.length > 0) {
          return stranger.emit('msg', {
            body: message
          });
        }
      });
    });
    socket.on('typing', function(data) {
      return socket.get('partner', function(err, stranger) {
        if (err) {
          throw err;
        }
        if (stranger) {
          return stranger.emit('typing');
        }
      });
    });
    socket.on('not typing', function(data) {
      return socket.get('partner', function(err, stranger) {
        if (err) {
          throw err;
        }
        if (stranger) {
          return stranger.emit('not typing');
        }
      });
    });
    return socket.on('disconnect', function() {
      return socket.get('partner', function(err, stranger) {
        if (err) {
          throw err;
        }
        if (stranger) {
          stranger.emit('disconnected');
          removePartner(stranger);
          return addToList(stranger);
        } else {
          return deleteFromList(socket);
        }
      });
    });
  });

  server.listen(app.get('port'), function() {
    return console.log("Express is listening on port " + (app.get('port')));
  });

}).call(this);
